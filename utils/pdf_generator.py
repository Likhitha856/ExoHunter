import streamlit as st
from fpdf import FPDF
import io
import numpy as np
from datetime import datetime

class ExoHunterReport(FPDF):
    def __init__(self):
        super().__init__()
        self.set_auto_page_break(auto=True, margin=15)
    
    def header(self):
        self.set_font('Arial', 'B', 16)
        self.set_text_color(0, 100, 200)
        self.cell(0, 10, '🪐 ExoHunter - Exoplanet Detection Report', 0, 1, 'C')
        self.ln(10)
    
    def footer(self):
        self.set_y(-15)
        self.set_font('Arial', 'I', 8)
        self.set_text_color(128, 128, 128)
        self.cell(0, 10, f'Page {self.page_no()} - Generated by ExoHunter AI Platform', 0, 0, 'C')
    
    def chapter_title(self, title):
        self.set_font('Arial', 'B', 14)
        self.set_text_color(0, 0, 0)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(5)
    
    def chapter_body(self, body):
        self.set_font('Arial', '', 11)
        self.set_text_color(0, 0, 0)
        self.multi_cell(0, 6, body)
        self.ln()

def generate_detection_report(results, original_data):
    """Generate PDF report of exoplanet detection analysis"""
    
    try:
        # Create PDF object
        pdf = ExoHunterReport()
        pdf.add_page()
        
        # Title page information
        pdf.chapter_title("Analysis Summary")
        
        # Basic statistics
        exoplanet_count = results['exoplanet_count']
        confidence = results['confidence']
        total_samples = len(results['predictions'])
        
        summary_text = f"""
Analysis Date: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}
Dataset Size: {total_samples:,} samples
Exoplanets Detected: {exoplanet_count}
Maximum Confidence: {confidence:.1%}
Detection Rate: {(exoplanet_count/total_samples)*100:.1f}%

This report contains the results of advanced AI analysis using ExoHunter's hybrid 
CNN + XGBoost fusion model for exoplanet detection. The analysis was performed on 
your uploaded dataset using NASA-validated methodologies.
        """
        
        pdf.chapter_body(summary_text.strip())
        
        # Model Performance Section
        pdf.chapter_title("Model Performance Metrics")
        
        accuracies = results['model_accuracies']
        performance_text = f"""
Our hybrid AI model combines two powerful machine learning approaches:

XGBoost Classifier Accuracy: {accuracies['xgb']:.1%}
- Gradient boosting algorithm optimized for tabular data
- Excellent at capturing complex feature interactions
- Robust against overfitting with proper regularization

Convolutional Neural Network Accuracy: {accuracies['cnn']:.1%}
- Deep learning model for pattern recognition
- Automatically learns hierarchical features
- Effective at identifying subtle transit signatures

Fusion Model Accuracy: {accuracies['fusion']:.1%}
- Combines predictions from both models
- Leverages strengths of each approach
- Provides more reliable and robust predictions

The fusion approach typically outperforms individual models by reducing bias 
and variance through ensemble learning principles.
        """
        
        pdf.chapter_body(performance_text.strip())
        
        # Detection Results Section
        pdf.chapter_title("Detailed Detection Results")
        
        predictions = results['predictions']
        probabilities = results['probabilities']
        
        # Calculate detection statistics
        confirmed_count = np.sum(predictions == 1)
        high_confidence_count = np.sum(probabilities > 0.8)
        medium_confidence_count = np.sum((probabilities > 0.5) & (probabilities <= 0.8))
        
        results_text = f"""
Classification Results:
- Confirmed Exoplanets: {confirmed_count}
- Non-detections: {total_samples - confirmed_count}

Confidence Distribution:
- High Confidence (>80%): {high_confidence_count} detections
- Medium Confidence (50-80%): {medium_confidence_count} detections
- Average Confidence: {np.mean(probabilities):.1%}
- Standard Deviation: {np.std(probabilities):.1%}

Top 5 Most Confident Detections:
        """
        
        # Add top detections
        top_indices = np.argsort(probabilities)[-5:][::-1]
        for i, idx in enumerate(top_indices, 1):
            if predictions[idx] == 1:
                results_text += f"\n{i}. Sample {idx+1}: {probabilities[idx]:.1%} confidence - CONFIRMED"
            else:
                results_text += f"\n{i}. Sample {idx+1}: {probabilities[idx]:.1%} confidence - Not detected"
        
        pdf.chapter_body(results_text.strip())
        
        # Dataset Information Section
        pdf.chapter_title("Dataset Characteristics")
        
        numeric_cols = original_data.select_dtypes(include=[np.number]).columns.tolist()
        dataset_info = f"""
Dataset Overview:
- Total Records: {original_data.shape[0]:,}
- Total Features: {original_data.shape[1]}
- Numeric Features: {len(numeric_cols)}
- Missing Data: {original_data.isnull().sum().sum()} cells

The analysis utilized the following key exoplanet detection features:
1. Orbital Period (koi_period): Time for planet to complete one orbit
2. Transit Depth (koi_depth): Amount of starlight blocked during transit  
3. Transit Duration (koi_duration): Time planet spends crossing star's disk
4. Impact Parameter (koi_impact): Planet's path across the stellar disk
5. Planet Radius (koi_prad): Size of planet relative to Earth

Data Quality Assessment:
- Complete records: {len(original_data.dropna())} ({(len(original_data.dropna())/len(original_data)*100):.1f}%)
- Data processing: Automated cleaning and normalization applied
- Feature scaling: StandardScaler normalization for ML compatibility
        """
        
        pdf.chapter_body(dataset_info.strip())
        
        # Methodology Section
        pdf.chapter_title("Methodology & Technical Details")
        
        methodology_text = """
ExoHunter employs a sophisticated hybrid machine learning approach:

1. Data Preprocessing:
   - Automated handling of missing values using median imputation
   - Feature scaling with StandardScaler for neural network compatibility
   - Quality validation and outlier detection

2. XGBoost Classifier:
   - Gradient boosting with 100 estimators
   - Optimized hyperparameters for exoplanet detection
   - Built-in regularization prevents overfitting
   - Excellent performance on tabular astronomical data

3. Convolutional Neural Network:
   - 1D CNN architecture for sequential feature analysis
   - Conv1D layer with 32 filters and ReLU activation
   - MaxPooling for dimensionality reduction
   - Dense layers for classification with dropout regularization

4. Model Fusion:
   - Simple averaging of probability predictions
   - Threshold of 0.5 for binary classification
   - Ensemble approach reduces individual model bias

5. Explainability:
   - SHAP (SHapley Additive exPlanations) values
   - Feature importance analysis
   - Model decision transparency

This methodology is based on established exoplanet detection practices used by 
NASA's Kepler, K2, and TESS missions, adapted for modern machine learning frameworks.
        """
        
        pdf.chapter_body(methodology_text.strip())
        
        # Recommendations Section
        pdf.chapter_title("Recommendations & Next Steps")
        
        recommendations_text = f"""
Based on the analysis results, we recommend:

1. Follow-up Observations:
   - Priority targets: {high_confidence_count} high-confidence detections
   - Ground-based photometry for confirmation
   - Spectroscopic analysis for planetary characterization

2. Data Quality Improvements:
   - Consider longer observation baselines for period accuracy
   - Multi-band photometry for better stellar characterization
   - Higher precision measurements reduce false positives

3. Statistical Analysis:
   - Detection rate of {(confirmed_count/total_samples)*100:.1f}% aligns with expected yields
   - Consider demographic studies of detected population
   - Compare results with established exoplanet catalogs

4. Model Confidence Interpretation:
   - High confidence (>80%): Strong candidates for follow-up
   - Medium confidence (50-80%): Require additional validation
   - Low confidence (<50%): Likely stellar variability or noise

5. Future Enhancements:
   - Incorporate additional features (stellar parameters, etc.)
   - Ensemble with different model architectures
   - Real-time processing for survey data streams

Remember that machine learning results require observational confirmation.
ExoHunter provides statistical likelihood, not definitive planet confirmation.
        """
        
        pdf.chapter_body(recommendations_text.strip())
        
        # Footer information
        pdf.add_page()
        pdf.chapter_title("About ExoHunter")
        
        about_text = """
ExoHunter is an advanced AI-powered platform for exoplanet detection and analysis. 
Developed using NASA's open datasets and state-of-the-art machine learning techniques, 
ExoHunter democratizes access to sophisticated astronomical analysis tools.

Key Features:
- Hybrid CNN + XGBoost fusion models
- Real-time analysis of uploaded datasets  
- Interactive visualizations and exploratory tools
- SHAP-based model explainability
- Professional PDF reporting

Data Sources:
- NASA Exoplanet Archive (KOI catalog)
- Kepler Space Telescope observations
- K2 extended mission data
- TESS all-sky survey results

Technical Stack:
- Python 3.8+ with TensorFlow 2.12
- XGBoost gradient boosting framework
- Streamlit web application framework
- Plotly for interactive visualizations
- SHAP for explainable AI

For more information, visit our platform or contact the development team.

🚀 Powered by NASA Open Data & AI Fusion

Disclaimer: This analysis is for research and educational purposes. 
Machine learning predictions should be validated through observational confirmation 
before claiming definitive exoplanet discoveries.
        """
        
        pdf.chapter_body(about_text.strip())
        
        # Save PDF to buffer
        pdf_buffer = io.BytesIO()
        pdf_output = pdf.output(dest='S').encode('latin1')
        pdf_buffer.write(pdf_output)
        pdf_buffer.seek(0)
        
        return pdf_buffer
        
    except Exception as e:
        st.error(f"Error generating PDF report: {str(e)}")
        return None
